<?php
// $Id: messages_alter.module,v 1.2 2010/07/08 03:15:06 bartonfreelance Exp $

/**
 * Implementation of hook_perm().
 */
function messages_alter_perm() {
  return array(
    'administer messages alter settings',
  );
}

/**
 * Implementation of hook_menu().
 */
function messages_alter_menu() {

  $items = array();

  $items['admin/settings/messages_alter'] = array(
    'title' => 'Messages Alter Settings',
    'description' => 'Administer settings for the messages alter module.',
    'page callback' => 'messages_alter_settings_page',
    'access arguments' => array('administer messages alter settings'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;

}

/*
 * Implementation of hook_theme().
 */
function messages_alter_theme() {
  return array(
    'messages_alter_status_messages' => array(
      'arguments' => array('display' => NULL, 'theme_function' => FALSE),
    ),
    'messages_alter_settings_page' => array(
      'arguments' => NULL,
    ),
  );
}

/*
 * Implementation of hook_theme_registry_alter to add messages theme function
 */
function messages_alter_theme_registry_alter(&$theme_registry) {
  if (!variable_get('messages_alter_theme_altered', FALSE)) {
    variable_set('messages_alter_theme_altered', $theme_registry['status_messages']['function']);
  }
  $theme_registry['status_messages']['function'] = 'theme_messages_alter_alter';
}

/**
 * Theme function
 * This is the theme function that overrides
 * theme('status_messages');
 */
function theme_messages_alter_alter($display=NULL) {
  messages_alter_invoke_message_alter();
  $output = theme('messages_alter_status_messages', $display, variable_get('messages_alter_theme_altered', FALSE));
  return $output;
}

/**
 * Theme function
 * Using a theme function here so that if someone wants to overide it, they can.
 */
function theme_messages_alter_status_messages($display=NULL, $theme_function=FALSE) {

  $output = '';

  if ($theme_function) {
    $output = $theme_function($display);
  }

  return $output;

}

/**
 * Loops through invokes all the modules that implement hook_message_alter().
 */
function messages_alter_invoke_message_alter() {

  // let's not confuse this object with
  // the Drupal session array
  // we're just going to add functionality
  // with a class because I think
  // it will be more fun this way
  $messages = messages_alter_get_messages();

  // this function speaks for itself
  drupal_alter('message', $messages);

  // we're cleaning this because
  // sometimes there are fragmented
  // messages after someone calls
  // the remove method of the messages object
  $messages->clean();

}

/**
 * The getter for your adapted messages object
 */
function messages_alter_get_messages($reset = FALSE) {

  static $return;

  if (!isset($return) || $reset) {

    if (!isset($_SESSION['messages'])) {
      $_SESSION['messages'] = array();
    }

    // I'm doing a "version" thingy here because
    // I've always thought it was rude for
    // modules to upgrade and then break
    // for existing users..
    // So I'm not going to break you :)
    // I hope..
    $version = check_plain(variable_get('messages_alter_version', 'rookie'));
    $path = drupal_get_path('module', 'messages_alter');
    require_once($path . '/lib/MessagesAlter.' . $version . '.php');
    $return = new MessagesAlter($_SESSION['messages']);

  }

  return $return;

}

/**
 * Implementation of hook_message_alter().
 *
 * You would do something like this
 * with your custom module:
 *
 * yourmodule_message_alter(&$messages) {
 *
 * }
 *
 */
function messages_alter_message_alter(&$messages) {

  /** STUB **/

}

// end HOOKS

// Theme Callbacks

function theme_messages_alter_settings_page() {

  $output = '';

  $output .= drupal_get_form('messages_alter_set_latest_form');
  $output .= drupal_get_form('messages_alter_settings_form');

  return $output;

}

// Form Callbacks

function messages_alter_set_latest_form() {

  $form = array();

  $form['latest'] = array(
    '#type' => 'fieldset',
    '#title' => t('Update'),
    '#description' => t('Click this button once you\'ve gone through and made sure your modules are compatible with the latest MessagesAlter object.'),
  );

  $form['latest']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update to latest version'),
  );

  return $form;

}

function messages_alter_set_latest_form_submit($form, &$form_state) {

  // this is set in the hook_update_N() function
  // it doesn't do anything once it's already been updated
  variable_set('messages_alter_version', variable_get('messages_alter_version_latest', 'rookie'));

  // give the user some feedback so he/she feels good about him/her self
  drupal_set_message(t('MessagesAlter object has been updated to the latest version.'));

}

function messages_alter_settings_form() {

  $form = array();

  $form['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced Settings'),
    '#description' => t('Only modify the following field(s) if you know what you\'re doing.'),
  );

  $version = messages_alter_version();
  $form['advanced']['messages_alter_version'] = array(
    '#type' => 'select',
    '#title' => t('What version of the MessageAlter object would you like to use?'),
    '#description' => t('In hopes of not breaking your site when future releases are released, we have versioned out the MessageAlter class that is used within the API.'),
    '#default_value' => check_plain($version),
    '#options' => array(
      'rookie' => '6.x-1.x-dev',
      '6.x-1.1-dev' => '6.x-1.1-dev',
    ),
  );

  return system_settings_form($form);

}

// Page Callbacks

function messages_alter_settings_page() {

  // doing it this way in case someone
  // wants to change the HTML
  return theme('messages_alter_settings_page');

}

// Helper Functions

/**
 * Tries to grab the current version
 * It'll only return "rookie" if
 * it's the first install and they haven't
 * upgraded yet. All new installs are set
 * correctly.
 */
function messages_alter_version() {
  return variable_get('messages_alter_version', 'rookie');
}